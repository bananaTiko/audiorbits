/**
 * @author D.Thiele @https://hexx.one
 * 
 * @license
 * Copyright (c) 2020 D.Thiele All rights reserved.  
 * Licensed under the GNU GENERAL PUBLIC LICENSE.
 * See LICENSE file in the project root for full license information.  
 * 
 * @description
 * Wallaper Engine Basic Geometry worker.
 */


//////////////////////////
//     CUSTOM API
//////////////////////////

@external("env", "logf")
declare function logf(value: f64): void;

@external("env", "logi")
declare function logi(value: u32): void;

@external("env", "logU32Array")
declare function logU32Array(arr: Uint32Array): void;

@external("env", "logF64Array")
declare function logF64Array(arr: Float64Array): void;

export function allocF64Array(length: i32): Float64Array {
    return new Float64Array(length);
}

export function allocU32Array(length: i32): Uint32Array {
    return new Uint32Array(length);
}

@inline
function deallocArray<T>(arr: T[]): void {
    memory.free(changetype<usize>(arr.buffer_));
    memory.free(changetype<usize>(arr));
}

// Math lib is using 64 bit prrecision float by default...
// so in order to not cast everything, use these short wrapeprs.

function isqrt(n: f32): f32 {
    return Math.sqrt(n) as f32;
}

function iabs(n: f32): f32 {
    return Math.abs(n) as f32;
}

function ilog(n: f32): f32 {
    return Math.log(n) as f32;
}

function ifloor(n: f64): i32 {
    return Math.floor(n) as i32;
}


//////////////////////////
//     Seeded Random
//////////////////////////

// seed used for this RNG
var seed: f32 = 1.0;

// generate seeded random float in Range[0,1]
// Kjona, [11.02.21 11:49], "Samen daddy" ðŸ’¦ðŸ’¦ðŸ’¦
function nextR(): f32 {
    seed = (seed * 9301.0 + 49297.0) % 233280.0 as f32;
    return seed / 233280.0 as f32;
}


//////////////////////////
//     Fractal Geo
//////////////////////////

// main Settings
var numSubsets: i32, numPoints: i32, hlfPoints: i32, scaleFactor: f32, iRadius: f32, oRadius: f32,
    // algorithm params
    al: f32, bl: f32, cl: f32, dl: f32, el: f32,
    // RNG
    choice1: f32,
    choice2: f32,
    // sclae helper
    minX: f32 = 0, maxX: f32 = 0, scaleX: f32, offsX: f32,
    minY: f32 = 0, maxY: f32 = 0, scaleY: f32, offsY: f32,
    tmp: f32,
    s: i32, // subset counter
    x: f32, // p-coord
    y: f32, // p-coord
    i: i32, // point counter
    z: f32, // alg-param
    x1: f32, // alg-param
    bid: i32, // overall level index
    dist: f32,
    scaling: f32,
    outer: f32,
    lData: Float32Array;

function FractalGeometry(levelId: i32): Array<Float32Array | null> {
    // shorthand
    numSubsets = ifloor(levelSettings[1]); 
    numPoints = ifloor(levelSettings[2]);
    hlfPoints = ifloor(numPoints / 2);
    scaleFactor = levelSettings[3]; 
    iRadius = levelSettings[4] / 100;
    oRadius = levelSettings[5] / 100;
    // get randomized params in defined ranges
    // E.g.:  a_val = a_min + random[0-1] * (a_max - a_min)
    al = levelSettings[6] + nextR() * (levelSettings[7] - levelSettings[6]);
    bl = levelSettings[8] + nextR() * (levelSettings[9] - levelSettings[8]);
    cl = levelSettings[10] + nextR() * (levelSettings[11] - levelSettings[10]);
    dl = levelSettings[12] + nextR() * (levelSettings[13] - levelSettings[12]);
    el = levelSettings[14] + nextR() * (levelSettings[15] - levelSettings[14]);

    // some stuff needed in the subset generation loop
    choice1 = nextR();
    choice2 = nextR();
    // scale calculation
    maxX = maxY = minX = minY =
    // Center weight offset calculation
    offsX = offsY = 0;

    // loop all subsets for the level
    for (s = 0; s < numSubsets; s++) {
        // Use a different starting point for each orbit subset
        // Needs explicit cast for whatever reason??
        x = s / 100.0 * (0.5 - nextR()) as f32;
        y = s / 100.0 * (0.5 - nextR()) as f32;

        // get array
        lData = lastData[s] as Float32Array;
        
        tmp = (choice1 + ((choice2 - choice1) * ((s / numSubsets) as f32)));
        
        for (i = 0; i < numPoints; i++) {

            // first half: Iteration formula (generalization of Barry Martin's one)
            if(i < hlfPoints /* || choice1 > 0.4 */) {

                if (choice1 < 0.5) z = (dl + (isqrt(iabs(bl * x - cl))));
                else if (choice1 < 0.75) z = (dl + isqrt(isqrt(iabs(bl * x - cl))));
                else z = (dl + ilog(2 + isqrt(iabs(bl * x - cl))));

                if (x > 0) x1 = y - z;
                else if (x == 0) x1 = y;
                else x1 = y + z;

                y = al - x;
                x = x1 + el

                // translate the point to make it look better ??
                rotatePoint(x, y, 180 * tmp);
                x = rotX;
                y = rotY;
            }
            // 2nd half of points, copy & flip y
            else {
                x = -lData[(i - hlfPoints) * 2];
                y = lData[(i - hlfPoints) * 2 + 1];
            }

            // process x
            if (x < minX) minX = x;
            else if (x > maxX) maxX = x;
            // process y
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;

            // calculate x buffer location
            bid = i * 2;
            // set x & y coordinates
            offsX += lData[bid] = x;
            offsY += lData[bid + 1] = y;
        }

    }

    offsX /= (numSubsets * numPoints) as f32;
    offsY /= (numSubsets * numPoints) as f32;

    // Normalize and post-process the level   
    for (s = 0; s < numSubsets; s++) {

        // get array
        lData = lastData[s] as Float32Array;
    
        for (i = 0; i < numPoints; i++) {
            // calculate x buffer location
            bid = i * 2;

            // re-scale x position
            if((lData[bid] + offsX) > 0) x = (lData[bid] + offsX) * scaleFactor / maxX;
            else x = (lData[bid] + offsX) * -scaleFactor / minX;

            // re-scale y position
            if((lData[bid + 1] + offsY) > 0) y = (lData[bid + 1] + offsY) * scaleFactor / maxY;
            else y = (lData[bid + 1] + offsY) * -scaleFactor / minY;
            y += offsY;

            // tunnel processing to take certain points from the center
            // and move them outwards in a circular way
            if (iRadius > 0) {
                dist = getPointDistance(0, 0, x, y) / scaleFactor;
                //print("pd: " + dist + ",   inner: " + iradius);
                if (dist < iRadius) {
                    scaling = dist / iRadius;
                    outer = scaling / oRadius;
                    x = x / scaling + x * outer;
                    y = y / scaling + y * outer;
                }
            }
            // set new scaled value
            lData[bid] = x;
            lData[bid + 1] = y;
        }
    }

    return lastData;
}


var a_dist: f32, b_dist: f32;

function getPointDistance(x1: f32, y1: f32, x2: f32, y2: f32): f32 {
    a_dist = x1 - x2;
    b_dist = y1 - y2;
    return isqrt(a_dist * a_dist + b_dist * b_dist);
}


var oX: f32, oY: f32, closestDist: f32, pDist: f32, closestIndx: i32;

function closestIndex(arr: Float32Array, pIndx: i32): i32 {
    oX = arr[pIndx];
    oY = arr[pIndx + 1];
    closestDist = 100000;
    closestIndx = -1;
    for(var pos = 0; pos < arr.length; pos += 2) {
        // skip own point, cause its obviously 0 distance
        if(pos == pIndx) continue;
        // calculate point distance
        pDist = getPointDistance(oX, oY, arr[pos], arr[pos + 1]);
        if(pDist < closestDist) {
            closestDist = pDist;
            closestIndx = pos;
        }
    }
    return closestIndx;
}

var tmpSin: f32, tmpCos: f32, rotX: f32, rotY: f32;

// assumes the point is already relative to origin
function rotatePoint(pX: f32, pY: f32, angle: f32): void {
    tmpSin = Math.sin(angle) as f32;
    tmpCos = Math.cos(angle) as f32;
    // rotate point
    rotX = pX * tmpCos - pY * tmpSin;
    rotY = pX * tmpSin + pY * tmpCos;
}

//////////////////////////
//     Main Program
//////////////////////////

// this will hold the current processing settings
export const levelSettings = new Float32Array(17);
levelSettings.fill(0.0);

// this will hold the last allocated array for re-use
var lastData: Array<Float32Array | null>;

// Call after updating settings always
export function update(): void {
    // create a buffer thats big enough to hold the x & y corrdinates of all points in a subset.
    // may seem ridiclous, but is actually the best way to transfer the data back
    // also, if the array did not change in size, don't recreate it every time...
    const numSubsets = ifloor(levelSettings[1]);
    const numPoints2 = ifloor(levelSettings[2]) * 2;
    lastData = new Array<Float32Array | null>(numSubsets);
    for(var s = 0; s < numSubsets; s++) {
        lastData[s] = new Float32Array(numPoints2);
    }
    // set seeded random
    seed = levelSettings[16];
}

// Build and return a level by specified settings
export function build(id: i32): Array<Float32Array | null> {
    // run generator
    return FractalGeometry(id);
}