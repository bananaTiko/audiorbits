/**
 * @author D.Thiele @https://hexx.one
 * 
 * @license
 * Copyright (c) 2020 D.Thiele All rights reserved.  
 * Licensed under the GNU GENERAL PUBLIC LICENSE.
 * See LICENSE file in the project root for full license information.  
 * 
 * @description
 * Wallaper Engine Basic Geometry worker.
 */


//////////////////////////
//     CUSTOM API
//////////////////////////

@external("env", "logf")
declare function logf(value: f64): void;

@external("env", "logi")
declare function logi(value: u32): void;

@external("env", "logU32Array")
declare function logU32Array(arr: Uint32Array): void;

@external("env", "logF64Array")
declare function logF64Array(arr: Float64Array): void;

export function allocF64Array(length: i32): Float64Array {
    return new Float64Array(length);
}

export function allocU32Array(length: i32): Uint32Array {
    return new Uint32Array(length);
}

@inline
function deallocArray<T>(arr: T[]): void {
    memory.free(changetype<usize>(arr.buffer_));
    memory.free(changetype<usize>(arr));
}

// Math lib is using 64 bit prrecision float by default...
// so in order to not cast everything, use these short wrapeprs.

function isqrt(n: f32): f32 {
    return Math.sqrt(n) as f32;
}

function iabs(n: f32): f32 {
    return Math.abs(n) as f32;
}

function ilog(n: f32): f32 {
    return Math.log(n) as f32;
}

function irnd(): f32 {
    return Math.random() as f32;
}

function ifloor(n: f64): i32 {
    return Math.floor(n) as i32;
}

//////////////////////////
//     Fractal Geo
//////////////////////////

function FractalGeometry(levelId: i32, reuse: Array<Float32Array | null>): Array<Float32Array | null> {
    // shorter to write and better to read
    const numSubsets = ifloor(levelSettings[1]); //i32
    const numPoints = ifloor(levelSettings[2]); //i32
    const scaleFactor = levelSettings[3]; //f32

    //const tunnel = levelSettings[4]; // @TODO remove index and shift <<

    const iRadius = levelSettings[5] / 100;
    const oRadius = levelSettings[6] / 100;

    // get randomized params in defined ranges
    // E.g.:  a_val = a_min + random[0-1] * (a_max - a_min)
    var al = levelSettings[7] + irnd() * (levelSettings[8] - levelSettings[7]),
        bl = levelSettings[9] + irnd() * (levelSettings[10] - levelSettings[9]),
        cl = levelSettings[11] + irnd() * (levelSettings[12] - levelSettings[11]),
        dl = levelSettings[13] + irnd() * (levelSettings[14] - levelSettings[13]),
        el = levelSettings[15] + irnd() * (levelSettings[16] - levelSettings[15]);

    // some stuff needed in the subset generation loop
    var choice = irnd(),
        xMin: f32 = 0,
        xMax: f32 = 0,
        yMin: f32 = 0,
        yMax: f32 = 0,
        s: i32, // subset counter
        x: f32, // p-coord
        y: f32, // p-coord
        i: i32, // point counter
        z: f32, // alg-param
        x1: f32, // alg-param
        bid: i32; // overall level index

    // loop all subsets for the level
    for (s = 0; s < numSubsets; s++) {

        // Use a different starting point for each orbit subset
        // Needs explicit cast for whatever reason??
        x = s / 100 * (0.5 - irnd()) as f32;
        y = s / 100 * (0.5 - irnd()) as f32;

        // get array
        const sets = reuse[s] as Float32Array;
        for (i = 0; i < numPoints; i++) {
            // Iteration formula (generalization of Barry Martin's one)
            if (choice < 0.5) z = (dl + (isqrt(iabs(bl * x - cl))));
            else if (choice < 0.75) z = (dl + isqrt(isqrt(iabs(bl * x - cl))));
            else z = (dl + ilog(2 + isqrt(iabs(bl * x - cl))));

            if (x > 0) x1 = y - z;
            else if (x == 0) x1 = y;
            else x1 = y + z;

            // process x
            if (x < xMin) xMin = x;
            else if (x > xMax) xMax = x;
            // process y
            if (y < yMin) yMin = y;
            else if (y > yMax) yMax = y;

            // calculate x buffer location
            bid = i * 2;
            // set y coordinate first
            sets[bid + 1] = y = al - x;
            // set x coordinate
            sets[bid] = x = x1 + el;
        }
    }

    // calculate level scale based on min and max values
    var scaleX: f32 = 2 * scaleFactor / (xMax - xMin),
        scaleY: f32 = 2 * scaleFactor / (yMax - yMin),
        dist: f32,
        scaling: f32,
        outer: f32;

    // Normalize and post-process the level   
    for (s = 0; s < numSubsets; s++) {
        // get array
        const sets = reuse[s] as Float32Array;
        for (i = 0; i < numPoints; i++) {
            // calculate x buffer location
            bid = i * 2;
            // re-scale x position
            x = scaleX * (sets[bid] - xMin) - scaleFactor;
            // re-scale y position
            y = scaleY * (sets[bid + 1] - yMin) - scaleFactor;
            // tunnel processing to take certain points from the center
            // and move them outwards in a circular way
            if (iRadius > 0) {
                dist = getPointDistance(0, 0, x, y) / scaleFactor;
                //print("pd: " + dist + ",   inner: " + iradius);
                if (dist < iRadius) {
                    scaling = dist / iRadius;
                    outer = scaling / oRadius;
                    x = x / scaling + x * outer;
                    y = y / scaling + y * outer;
                }
            }
            // set new scaled value
            sets[bid] = x;
            sets[bid + 1] = y;
        }
    }

    return reuse;
}

function getPointDistance(x1: f32, y1: f32, x2: f32, y2: f32): f32 {
    var a = x1 - x2;
    var b = y1 - y2;
    return isqrt(a * a + b * b);
}

// internal short-hand helper
function myBuild(id: i32): Array<Float32Array | null> {
    // create a buffer thats big enough to hold the x & y corrdinates of all points in a subset.
    // may seem ridiclous, but is actually the best way to transfer the data back
    // also, if the array did not change in size, don't recreate it every time...
    const numSubsets = ifloor(levelSettings[0]);
    const numPoints2 = ifloor(levelSettings[1]) * 2;
    if(lastData == null) {
        lastData = new Array<Float32Array | null>(numSubsets);
        for(var i = 0; i < numSubsets; i++) {
            var x = lastData[i] = new Float32Array(numPoints2);
            (x as Float32Array).fill(123);
        }
    }
    return lastData = FractalGeometry(id, lastData);
}

//////////////////////////
//     Main Program
//////////////////////////

// this will hold the last allocated array for re-use
var lastData: Array<Float32Array | null>;

// this will hold the current processing settings
// @todo sync
export const levelSettings = new Float32Array(17);
levelSettings.fill(0.0);

// Build and return a level by specified settings
export function build(id: i32): Array<Float32Array | null> {
    // run generator
    return myBuild(id);
}